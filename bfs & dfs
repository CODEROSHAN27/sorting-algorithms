vector<int> bfsTraversal(int n, vector<vector<int>> &adj){
      queue<int> q;
          int vis[n]={0};
          vis[0]=1;
        q.push(0);
        vector<int> bfs;
        while(q.empty()==false)
        {
            bfs.push_back(q.front());
            for(int i=0;i<adj[q.front()].size();i++)
            {
                if(vis[adj[q.front()][i]]==0){
                 q.push(adj[q.front()][i]);
                   vis[adj[q.front()][i]]=1; 
                }
                 
            }
            q.pop();
            
        }
        return bfs;
}
 void depth(int vis[],vector<int>& dfs,int track,vector<int> adj[])
    {
        dfs.push_back(track);
        vis[track]=1;
     for(int i=0;i<adj[track].size();i++)
     {
         if(vis[adj[track][i]]==0)
         {
            int x=adj[track][i];
            depth(vis,dfs,x,adj);
         }
     }
    }
    vector<int> dfsOfGraph(int V, vector<int> adj[]) {
       int vis[V]={0};
       int track=0;
       vector<int> dfs; 
       depth(vis,dfs,track,adj);
       return dfs;
    }
